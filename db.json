{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1754571223635},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1754571720020},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"6497b70356271fd6f9f1dc862353be844c457a53","modified":1754571725354},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"a93d7b3990e45bc7247eecf01888f71674887a63","modified":1754571725356},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1754571725357},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"06889bee30e4c39479467021da434d3a6a0990fc","modified":1754571725354},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1754571725357},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1754571725357},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1754571725357},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1754571725357},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1754571725357},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1754571725357},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1754571725357},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1754571725358},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1754571725358},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1754571725358},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1754571725358},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1754571725358},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1754571725358},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1754571725358},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1754571725358},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1754571725358},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1754571725358},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1754571725359},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1754571725359},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1754571725359},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1754571725357},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1754571725360},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1754571725360},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1754571725360},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1754571725360},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1754571725360},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1754571725360},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1754571725360},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1754571725360},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1754571720022},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1754571725360},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1754571720022},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1754571725360},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"57281fc3812c877ec2d8e89ec87ede57b9789d4c","modified":1754571720023},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1754571720023},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1754571720024},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1754571720024},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1754571720024},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1754571725033},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"1b89d0caba03a66a43d9c290a5e94fa438a89210","modified":1754571720021},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"0039146b8ccbdf9b9f8bee58fc6c238f0e9921fc","modified":1754571720021},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1754571720021},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"e9d4678e14be5e3cd5e34d783e5af6d6626092f5","modified":1754571720022},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1754571720023},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1754571720023},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1754571720022},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"0e94f5722d4c44d3cc91be2f4fd30b9ab503b868","modified":1754571720023},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1754571720023},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1754571720021},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1754571720024},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1754571720022},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1754571720024},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1754571720024},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1754571725354},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1754571720024},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1754571720023},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1754571725354},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1754571725356},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1754571720020},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1754571725353},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1754571720022},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1754571720024},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1754571720022},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1754571720022},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1754571720024},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1754571720024},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"f608400a08cf137ab15ec1f44bac551950afe879","modified":1754571725354},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1754571725355},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1754571725354},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1754571725355},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1754571725355},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1754571725356},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1754571725356},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1754571725356},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1754571725356},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1754571725356},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1754571725355},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1754571725356},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1754571725352},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1754571725036},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1754571724542},{"_id":"public/2025/08/07/hello-world/index.html","hash":"9d99565c379c8d4b56cd4695c87be6f189090f5e","modified":1754919626978},{"_id":"public/archives/index.html","hash":"1a55b631915ee0d3aa809c0172641f62a5723ed0","modified":1760199242366},{"_id":"public/archives/2025/index.html","hash":"89bd3d6e3021ddb8eab3936747204cbed1aa9f64","modified":1760199242366},{"_id":"public/archives/2025/08/index.html","hash":"79752c3871a6dbafcdf5cf8bffc8761451adff79","modified":1760199242366},{"_id":"public/index.html","hash":"6c094d2534cce1d41768aa599e2ec80f2274789f","modified":1760199242366},{"_id":"public/css/style.css","hash":"ecc329be740a220cc188ff49b02da4847cb7ee5e","modified":1754571790046},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1754571790046},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1754571790046},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1754571790046},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1754571790046},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1754571790046},{"_id":"source/_posts/kubernetes-001.md","hash":"ce5b632ad1c9b32c07374957821e0ddff39f94ec","modified":1754919619544},{"_id":"public/2025/08/07/kubernetes-001/index.html","hash":"fe86ad198dc977efa945ba85f1a963ee70b57119","modified":1754919626978},{"_id":"source/_posts/kubernetes-memory-manager.md","hash":"9d8d5827f1f2bbc0aa38430cdeba4947de51e683","modified":1756821687344},{"_id":"public/2025/08/07/kubernetes-memory-manager/index.html","hash":"e596642ce94dade5423afa5557e7eeae89b838f6","modified":1760199242366},{"_id":"source/_posts/linux-commands.md","hash":"f2dc1f231dc9ab40ef08f22067ba466a921f1ff6","modified":1756821684035},{"_id":"public/2025/08/01/linux-commands/index.html","hash":"babaf77cae98b1a51765b3ca82302334ce288cd1","modified":1760199242366},{"_id":"source/_posts/golang-interface.md","hash":"7b1e49649a6188eb1384707a00f4087eb5b84256","modified":1756822579799},{"_id":"public/2025/09/02/golang-interface/index.html","hash":"a01ac0e925090cdb066a2689c12186fee60c5fe8","modified":1760199242366},{"_id":"public/archives/2025/09/index.html","hash":"04ff426462313bca8ba010326d90336e65d55978","modified":1760199242366},{"_id":"public/tags/Golang/index.html","hash":"dfe5bfb6d51d97ee86ff25d9bf841d043144c330","modified":1760199242366},{"_id":"public/tags/Linux/index.html","hash":"ee01a2cda2e67f94a64c8c9d69805e3ae7c3a654","modified":1760199242366},{"_id":"public/tags/Kubernetes/index.html","hash":"f615d6afa6bac4189e8c4db6d9633bc9e0e8f562","modified":1760199242366},{"_id":"source/_posts/web-auth.md","hash":"55250a586eecc431fe3f31d850237b47756c5b8f","modified":1757348503098},{"_id":"public/2025/09/08/web-auth/index.html","hash":"7fbde10a0f7f5de23817f98b1ce8e84a9aa3cab6","modified":1760199242366},{"_id":"public/tags/Web/index.html","hash":"0a03b591e58129a09bc37ce93c3f1635a124a86b","modified":1760199242366},{"_id":"source/_posts/fuction-as-a-service.md","hash":"3c69283f1d598ba02c231f9cccada9472044df6c","modified":1760184916571},{"_id":"public/2025/09/28/fuction-as-a-service/index.html","hash":"2213dae8f998519ddd6c13917d4bd42e0f6ecdf6","modified":1760199242366},{"_id":"public/tags/faas-serverless/index.html","hash":"b5d0eb48365a77e449587e3c5c22a00e5aaa767f","modified":1759074235520},{"_id":"source/_posts/linux-cgroups.md","hash":"40667356ae5f8bc1264391617952d74456baf837","modified":1760199187898},{"_id":"public/2025/10/11/linux-cgroups/index.html","hash":"860891e3da1dc59a635b18df3163ffc6f7552604","modified":1760199242366},{"_id":"public/archives/2025/10/index.html","hash":"70a18701502608dfe9bb98881798f7492dc9201a","modified":1760199242366},{"_id":"public/tags/faas/index.html","hash":"9ff94baf95173ecfac43c82e0a1a89698d5ddb4e","modified":1760199242366}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Kubernetes NUMA-aware Memory Manager","date":"2025-08-07T13:37:07.000Z","_content":"对于具有多个NUMA节点的Intel CPU，CPU访问所属NUMA节点下的内存延迟更低，跨NUMA访问内存时延迟较高，对于一些性能敏感的应用来说，如果能够确保应用只访问本地内存，或者尽可能少出现跨NUMA访问，可以显著提高应用性能。因此k8s内引入了内存管理器，其目标是：\n1. 保障容器分配到足够多的可用内存，并且内存分布于尽可能少的NUMA节点上\n2. 对于一组容器，确保其内存和大页的亲和性属于同一个NUMA节点\n## 官方文档\n+ [Utilizing the NUMA-aware Memory Manager](https://kubernetes.io/docs/tasks/administer-cluster/memory-manager/)\n+ [KEP-1769: Memory Manager](https://github.com/kubernetes/enhancements/tree/master/keps/sig-node/1769-memory-manager#kep-1769-memory-manager)\n\n## 核心思路\n实现了[MemoryManager](https://github.com/kubernetes/kubernetes/tree/release-1.24/pkg/kubelet/cm/memorymanager)，MemoryManger提供的主要功能是：\n+ 对于一个给定内存需求的容器，确定其内存分配到哪几个NUMA上\n+ 决策结果的持久化，因为kubelet可能会重启\n+ 查询容器的内存分配结果\n+ ...\n\nMemoryManger的核心是[Policy](https://github.com/kubernetes/kubernetes/blob/release-1.24/pkg/kubelet/cm/memorymanager/policy.go)，用于决策怎么给QOS为Guaranteed并且内存需求的内存资源为整数MB的容器分配内存。Static policy核心Allocate算法可以概括为：\n+ 对于一个具有n个NUMA节点的主机来说，这n个节点可能会有n*(n-1)种组合，分别为[[0],...,[n],[0,1],...[n-1,n],...,[0,1,...,n]]，最终内存分配的结果是其中一种\n+ 对于其中的每个组合，判断其中各个NUMA节点的Allocatable内存之和是否可以满足容器的内存需求，如果可以满足，则将其视为一种可能的组合\n+ 对于所有可能的组合，将其中NUMA节点最少的组合记为preferred\n+ 从preferred组合种寻找best hint，判断的规则是其NUMA id排序最小\n+ 选出best hint后，需要判断best hint是否可以满足所有内存资源需求。如果不是，则需要扩大hint范围，扩展的策略是筛选出所有包含best hint的hint，并再此选出其中最优的\n+ 如果以上决策出的hint中包含多个NUMA node，那么这几个NUMA node被视为位于一个cell，之后这几个NUMA node都不能单独提供内存，也不能再加入其他的cell\n\n一些特性：\n+ Policy的Allocate接口是幂等的\n+ 对于一个pod来说，init container的内存是可以被后续的容器所使用的\n","source":"_posts/kubernetes-memory-manager.md","raw":"---\ntitle: Kubernetes NUMA-aware Memory Manager\ndate: 2025-08-07 21:37:07\ntags: Kubernetes\n---\n对于具有多个NUMA节点的Intel CPU，CPU访问所属NUMA节点下的内存延迟更低，跨NUMA访问内存时延迟较高，对于一些性能敏感的应用来说，如果能够确保应用只访问本地内存，或者尽可能少出现跨NUMA访问，可以显著提高应用性能。因此k8s内引入了内存管理器，其目标是：\n1. 保障容器分配到足够多的可用内存，并且内存分布于尽可能少的NUMA节点上\n2. 对于一组容器，确保其内存和大页的亲和性属于同一个NUMA节点\n## 官方文档\n+ [Utilizing the NUMA-aware Memory Manager](https://kubernetes.io/docs/tasks/administer-cluster/memory-manager/)\n+ [KEP-1769: Memory Manager](https://github.com/kubernetes/enhancements/tree/master/keps/sig-node/1769-memory-manager#kep-1769-memory-manager)\n\n## 核心思路\n实现了[MemoryManager](https://github.com/kubernetes/kubernetes/tree/release-1.24/pkg/kubelet/cm/memorymanager)，MemoryManger提供的主要功能是：\n+ 对于一个给定内存需求的容器，确定其内存分配到哪几个NUMA上\n+ 决策结果的持久化，因为kubelet可能会重启\n+ 查询容器的内存分配结果\n+ ...\n\nMemoryManger的核心是[Policy](https://github.com/kubernetes/kubernetes/blob/release-1.24/pkg/kubelet/cm/memorymanager/policy.go)，用于决策怎么给QOS为Guaranteed并且内存需求的内存资源为整数MB的容器分配内存。Static policy核心Allocate算法可以概括为：\n+ 对于一个具有n个NUMA节点的主机来说，这n个节点可能会有n*(n-1)种组合，分别为[[0],...,[n],[0,1],...[n-1,n],...,[0,1,...,n]]，最终内存分配的结果是其中一种\n+ 对于其中的每个组合，判断其中各个NUMA节点的Allocatable内存之和是否可以满足容器的内存需求，如果可以满足，则将其视为一种可能的组合\n+ 对于所有可能的组合，将其中NUMA节点最少的组合记为preferred\n+ 从preferred组合种寻找best hint，判断的规则是其NUMA id排序最小\n+ 选出best hint后，需要判断best hint是否可以满足所有内存资源需求。如果不是，则需要扩大hint范围，扩展的策略是筛选出所有包含best hint的hint，并再此选出其中最优的\n+ 如果以上决策出的hint中包含多个NUMA node，那么这几个NUMA node被视为位于一个cell，之后这几个NUMA node都不能单独提供内存，也不能再加入其他的cell\n\n一些特性：\n+ Policy的Allocate接口是幂等的\n+ 对于一个pod来说，init container的内存是可以被后续的容器所使用的\n","slug":"kubernetes-memory-manager","published":1,"updated":"2025-09-02T14:01:27.344Z","_id":"cme779yae0000fiuz0vyogfh5","comments":1,"layout":"post","photos":[],"content":"<p>对于具有多个NUMA节点的Intel CPU，CPU访问所属NUMA节点下的内存延迟更低，跨NUMA访问内存时延迟较高，对于一些性能敏感的应用来说，如果能够确保应用只访问本地内存，或者尽可能少出现跨NUMA访问，可以显著提高应用性能。因此k8s内引入了内存管理器，其目标是：</p>\n<ol>\n<li>保障容器分配到足够多的可用内存，并且内存分布于尽可能少的NUMA节点上</li>\n<li>对于一组容器，确保其内存和大页的亲和性属于同一个NUMA节点</li>\n</ol>\n<h2 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h2><ul>\n<li><a href=\"https://kubernetes.io/docs/tasks/administer-cluster/memory-manager/\">Utilizing the NUMA-aware Memory Manager</a></li>\n<li><a href=\"https://github.com/kubernetes/enhancements/tree/master/keps/sig-node/1769-memory-manager#kep-1769-memory-manager\">KEP-1769: Memory Manager</a></li>\n</ul>\n<h2 id=\"核心思路\"><a href=\"#核心思路\" class=\"headerlink\" title=\"核心思路\"></a>核心思路</h2><p>实现了<a href=\"https://github.com/kubernetes/kubernetes/tree/release-1.24/pkg/kubelet/cm/memorymanager\">MemoryManager</a>，MemoryManger提供的主要功能是：</p>\n<ul>\n<li>对于一个给定内存需求的容器，确定其内存分配到哪几个NUMA上</li>\n<li>决策结果的持久化，因为kubelet可能会重启</li>\n<li>查询容器的内存分配结果</li>\n<li>…</li>\n</ul>\n<p>MemoryManger的核心是<a href=\"https://github.com/kubernetes/kubernetes/blob/release-1.24/pkg/kubelet/cm/memorymanager/policy.go\">Policy</a>，用于决策怎么给QOS为Guaranteed并且内存需求的内存资源为整数MB的容器分配内存。Static policy核心Allocate算法可以概括为：</p>\n<ul>\n<li>对于一个具有n个NUMA节点的主机来说，这n个节点可能会有n*(n-1)种组合，分别为[[0],…,[n],[0,1],…[n-1,n],…,[0,1,…,n]]，最终内存分配的结果是其中一种</li>\n<li>对于其中的每个组合，判断其中各个NUMA节点的Allocatable内存之和是否可以满足容器的内存需求，如果可以满足，则将其视为一种可能的组合</li>\n<li>对于所有可能的组合，将其中NUMA节点最少的组合记为preferred</li>\n<li>从preferred组合种寻找best hint，判断的规则是其NUMA id排序最小</li>\n<li>选出best hint后，需要判断best hint是否可以满足所有内存资源需求。如果不是，则需要扩大hint范围，扩展的策略是筛选出所有包含best hint的hint，并再此选出其中最优的</li>\n<li>如果以上决策出的hint中包含多个NUMA node，那么这几个NUMA node被视为位于一个cell，之后这几个NUMA node都不能单独提供内存，也不能再加入其他的cell</li>\n</ul>\n<p>一些特性：</p>\n<ul>\n<li>Policy的Allocate接口是幂等的</li>\n<li>对于一个pod来说，init container的内存是可以被后续的容器所使用的</li>\n</ul>\n","excerpt":"","more":"<p>对于具有多个NUMA节点的Intel CPU，CPU访问所属NUMA节点下的内存延迟更低，跨NUMA访问内存时延迟较高，对于一些性能敏感的应用来说，如果能够确保应用只访问本地内存，或者尽可能少出现跨NUMA访问，可以显著提高应用性能。因此k8s内引入了内存管理器，其目标是：</p>\n<ol>\n<li>保障容器分配到足够多的可用内存，并且内存分布于尽可能少的NUMA节点上</li>\n<li>对于一组容器，确保其内存和大页的亲和性属于同一个NUMA节点</li>\n</ol>\n<h2 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h2><ul>\n<li><a href=\"https://kubernetes.io/docs/tasks/administer-cluster/memory-manager/\">Utilizing the NUMA-aware Memory Manager</a></li>\n<li><a href=\"https://github.com/kubernetes/enhancements/tree/master/keps/sig-node/1769-memory-manager#kep-1769-memory-manager\">KEP-1769: Memory Manager</a></li>\n</ul>\n<h2 id=\"核心思路\"><a href=\"#核心思路\" class=\"headerlink\" title=\"核心思路\"></a>核心思路</h2><p>实现了<a href=\"https://github.com/kubernetes/kubernetes/tree/release-1.24/pkg/kubelet/cm/memorymanager\">MemoryManager</a>，MemoryManger提供的主要功能是：</p>\n<ul>\n<li>对于一个给定内存需求的容器，确定其内存分配到哪几个NUMA上</li>\n<li>决策结果的持久化，因为kubelet可能会重启</li>\n<li>查询容器的内存分配结果</li>\n<li>…</li>\n</ul>\n<p>MemoryManger的核心是<a href=\"https://github.com/kubernetes/kubernetes/blob/release-1.24/pkg/kubelet/cm/memorymanager/policy.go\">Policy</a>，用于决策怎么给QOS为Guaranteed并且内存需求的内存资源为整数MB的容器分配内存。Static policy核心Allocate算法可以概括为：</p>\n<ul>\n<li>对于一个具有n个NUMA节点的主机来说，这n个节点可能会有n*(n-1)种组合，分别为[[0],…,[n],[0,1],…[n-1,n],…,[0,1,…,n]]，最终内存分配的结果是其中一种</li>\n<li>对于其中的每个组合，判断其中各个NUMA节点的Allocatable内存之和是否可以满足容器的内存需求，如果可以满足，则将其视为一种可能的组合</li>\n<li>对于所有可能的组合，将其中NUMA节点最少的组合记为preferred</li>\n<li>从preferred组合种寻找best hint，判断的规则是其NUMA id排序最小</li>\n<li>选出best hint后，需要判断best hint是否可以满足所有内存资源需求。如果不是，则需要扩大hint范围，扩展的策略是筛选出所有包含best hint的hint，并再此选出其中最优的</li>\n<li>如果以上决策出的hint中包含多个NUMA node，那么这几个NUMA node被视为位于一个cell，之后这几个NUMA node都不能单独提供内存，也不能再加入其他的cell</li>\n</ul>\n<p>一些特性：</p>\n<ul>\n<li>Policy的Allocate接口是幂等的</li>\n<li>对于一个pod来说，init container的内存是可以被后续的容器所使用的</li>\n</ul>\n"},{"title":"Linux commands","date":"2025-08-01T12:08:21.000Z","_content":"## cpu\n\n## memory\n\n## process\n```sh\n# 列出所有进程\nps -ef\nps -aux\n\n# 查看指定进程\nps -p 3284\n\n# 列出子进程\nps --ppid 3284 \n\n# 查看所有父进程\npstree -p -s 3370\n```\n\n## filesystem\n```shell\ndebugfs /dev/vda1\n\nstat /tmp\n\ndf -i\ndf -h\ndu -sh *\n```\n\n## network\n```shell\n# 查看打开的端口\nlsof -ni\n\nnetstat\n\nss\n```\n\n## atop\n\n## containerd\n```bash\n# 拉镜像\nctr image pull docker.io/library/nginx:latest\n\n# 创建容器并启动\nctr run --detach docker.io/library/nginx:latest nginx-test\nctr run --rm --shim-cgroup /my_cgroup docker.io/library/nginx:latest nginx-test\n\n# 创建容器\nctr container create docker.io/library/nginx:latest nginx-test\nctr container create --mount=type=bind,src=/test/tmp,dst=/host/path,options=rbind:ro docker.io/library/nginx:latest nginx-test\n\n# 查看容器信息\nctr container info nginx-test\n\n# 删除容器\nctr container delete nginx-test\n\n# 启动容器\nctr task start --detach nginx-test\n\n# 容器内执行命令\nctr task exec --exec-id pwd-test nginx-test pwd\nctr task exec -t --exec-id bash-test nginx-test /bin/bash\n\n# \nctr task attach nginx-test\n\n# 向容器发信号\nctr task kill -s 9 nginx-test\n```\n\n\n## systemd\n```shell\nsystemctl status containerd.service\nsystemctl restart containerd.service\n```\n\n## journalctl\n```shell\njournalctl -u containerd.service\n```\n\n## mysql\n```shell\napt install mariadb-server\nmysqladm -u root password '123456'\n```\n\n","source":"_posts/linux-commands.md","raw":"---\ntitle: Linux commands\ndate: 2025-08-01 20:08:21\ntags: Linux\n---\n## cpu\n\n## memory\n\n## process\n```sh\n# 列出所有进程\nps -ef\nps -aux\n\n# 查看指定进程\nps -p 3284\n\n# 列出子进程\nps --ppid 3284 \n\n# 查看所有父进程\npstree -p -s 3370\n```\n\n## filesystem\n```shell\ndebugfs /dev/vda1\n\nstat /tmp\n\ndf -i\ndf -h\ndu -sh *\n```\n\n## network\n```shell\n# 查看打开的端口\nlsof -ni\n\nnetstat\n\nss\n```\n\n## atop\n\n## containerd\n```bash\n# 拉镜像\nctr image pull docker.io/library/nginx:latest\n\n# 创建容器并启动\nctr run --detach docker.io/library/nginx:latest nginx-test\nctr run --rm --shim-cgroup /my_cgroup docker.io/library/nginx:latest nginx-test\n\n# 创建容器\nctr container create docker.io/library/nginx:latest nginx-test\nctr container create --mount=type=bind,src=/test/tmp,dst=/host/path,options=rbind:ro docker.io/library/nginx:latest nginx-test\n\n# 查看容器信息\nctr container info nginx-test\n\n# 删除容器\nctr container delete nginx-test\n\n# 启动容器\nctr task start --detach nginx-test\n\n# 容器内执行命令\nctr task exec --exec-id pwd-test nginx-test pwd\nctr task exec -t --exec-id bash-test nginx-test /bin/bash\n\n# \nctr task attach nginx-test\n\n# 向容器发信号\nctr task kill -s 9 nginx-test\n```\n\n\n## systemd\n```shell\nsystemctl status containerd.service\nsystemctl restart containerd.service\n```\n\n## journalctl\n```shell\njournalctl -u containerd.service\n```\n\n## mysql\n```shell\napt install mariadb-server\nmysqladm -u root password '123456'\n```\n\n","slug":"linux-commands","published":1,"updated":"2025-09-02T14:01:24.035Z","_id":"cmejz9qzd0000gsuzb71657v7","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"cpu\"><a href=\"#cpu\" class=\"headerlink\" title=\"cpu\"></a>cpu</h2><h2 id=\"memory\"><a href=\"#memory\" class=\"headerlink\" title=\"memory\"></a>memory</h2><h2 id=\"process\"><a href=\"#process\" class=\"headerlink\" title=\"process\"></a>process</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有进程</span></span><br><span class=\"line\">ps -ef</span><br><span class=\"line\">ps -aux</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定进程</span></span><br><span class=\"line\">ps -p 3284</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出子进程</span></span><br><span class=\"line\">ps --ppid 3284 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有父进程</span></span><br><span class=\"line\">pstree -p -s 3370</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"filesystem\"><a href=\"#filesystem\" class=\"headerlink\" title=\"filesystem\"></a>filesystem</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debugfs /dev/vda1</span><br><span class=\"line\"></span><br><span class=\"line\">stat /tmp</span><br><span class=\"line\"></span><br><span class=\"line\">df -i</span><br><span class=\"line\">df -h</span><br><span class=\"line\">du -sh *</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"network\"><a href=\"#network\" class=\"headerlink\" title=\"network\"></a>network</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看打开的端口</span></span><br><span class=\"line\">lsof -ni</span><br><span class=\"line\"></span><br><span class=\"line\">netstat</span><br><span class=\"line\"></span><br><span class=\"line\">ss</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"atop\"><a href=\"#atop\" class=\"headerlink\" title=\"atop\"></a>atop</h2><h2 id=\"containerd\"><a href=\"#containerd\" class=\"headerlink\" title=\"containerd\"></a>containerd</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉镜像</span></span><br><span class=\"line\">ctr image pull docker.io/library/nginx:latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建容器并启动</span></span><br><span class=\"line\">ctr run --detach docker.io/library/nginx:latest nginx-test</span><br><span class=\"line\">ctr run --<span class=\"built_in\">rm</span> --shim-cgroup /my_cgroup docker.io/library/nginx:latest nginx-test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建容器</span></span><br><span class=\"line\">ctr container create docker.io/library/nginx:latest nginx-test</span><br><span class=\"line\">ctr container create --mount=<span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,src=/test/tmp,dst=/host/path,options=rbind:ro docker.io/library/nginx:latest nginx-test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看容器信息</span></span><br><span class=\"line\">ctr container info nginx-test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除容器</span></span><br><span class=\"line\">ctr container delete nginx-test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动容器</span></span><br><span class=\"line\">ctr task start --detach nginx-test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 容器内执行命令</span></span><br><span class=\"line\">ctr task <span class=\"built_in\">exec</span> --exec-id pwd-test nginx-test <span class=\"built_in\">pwd</span></span><br><span class=\"line\">ctr task <span class=\"built_in\">exec</span> -t --exec-id bash-test nginx-test /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">ctr task attach nginx-test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 向容器发信号</span></span><br><span class=\"line\">ctr task <span class=\"built_in\">kill</span> -s 9 nginx-test</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"systemd\"><a href=\"#systemd\" class=\"headerlink\" title=\"systemd\"></a>systemd</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status containerd.service</span><br><span class=\"line\">systemctl restart containerd.service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"journalctl\"><a href=\"#journalctl\" class=\"headerlink\" title=\"journalctl\"></a>journalctl</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">journalctl -u containerd.service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install mariadb-server</span><br><span class=\"line\">mysqladm -u root password &#x27;123456&#x27;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"cpu\"><a href=\"#cpu\" class=\"headerlink\" title=\"cpu\"></a>cpu</h2><h2 id=\"memory\"><a href=\"#memory\" class=\"headerlink\" title=\"memory\"></a>memory</h2><h2 id=\"process\"><a href=\"#process\" class=\"headerlink\" title=\"process\"></a>process</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有进程</span></span><br><span class=\"line\">ps -ef</span><br><span class=\"line\">ps -aux</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定进程</span></span><br><span class=\"line\">ps -p 3284</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出子进程</span></span><br><span class=\"line\">ps --ppid 3284 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有父进程</span></span><br><span class=\"line\">pstree -p -s 3370</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"filesystem\"><a href=\"#filesystem\" class=\"headerlink\" title=\"filesystem\"></a>filesystem</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debugfs /dev/vda1</span><br><span class=\"line\"></span><br><span class=\"line\">stat /tmp</span><br><span class=\"line\"></span><br><span class=\"line\">df -i</span><br><span class=\"line\">df -h</span><br><span class=\"line\">du -sh *</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"network\"><a href=\"#network\" class=\"headerlink\" title=\"network\"></a>network</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看打开的端口</span></span><br><span class=\"line\">lsof -ni</span><br><span class=\"line\"></span><br><span class=\"line\">netstat</span><br><span class=\"line\"></span><br><span class=\"line\">ss</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"atop\"><a href=\"#atop\" class=\"headerlink\" title=\"atop\"></a>atop</h2><h2 id=\"containerd\"><a href=\"#containerd\" class=\"headerlink\" title=\"containerd\"></a>containerd</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉镜像</span></span><br><span class=\"line\">ctr image pull docker.io/library/nginx:latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建容器并启动</span></span><br><span class=\"line\">ctr run --detach docker.io/library/nginx:latest nginx-test</span><br><span class=\"line\">ctr run --<span class=\"built_in\">rm</span> --shim-cgroup /my_cgroup docker.io/library/nginx:latest nginx-test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建容器</span></span><br><span class=\"line\">ctr container create docker.io/library/nginx:latest nginx-test</span><br><span class=\"line\">ctr container create --mount=<span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,src=/test/tmp,dst=/host/path,options=rbind:ro docker.io/library/nginx:latest nginx-test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看容器信息</span></span><br><span class=\"line\">ctr container info nginx-test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除容器</span></span><br><span class=\"line\">ctr container delete nginx-test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动容器</span></span><br><span class=\"line\">ctr task start --detach nginx-test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 容器内执行命令</span></span><br><span class=\"line\">ctr task <span class=\"built_in\">exec</span> --exec-id pwd-test nginx-test <span class=\"built_in\">pwd</span></span><br><span class=\"line\">ctr task <span class=\"built_in\">exec</span> -t --exec-id bash-test nginx-test /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">ctr task attach nginx-test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 向容器发信号</span></span><br><span class=\"line\">ctr task <span class=\"built_in\">kill</span> -s 9 nginx-test</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"systemd\"><a href=\"#systemd\" class=\"headerlink\" title=\"systemd\"></a>systemd</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status containerd.service</span><br><span class=\"line\">systemctl restart containerd.service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"journalctl\"><a href=\"#journalctl\" class=\"headerlink\" title=\"journalctl\"></a>journalctl</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">journalctl -u containerd.service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install mariadb-server</span><br><span class=\"line\">mysqladm -u root password &#x27;123456&#x27;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Golang interface best practice","date":"2025-09-02T14:00:53.000Z","_content":"# 1. 在使用接口的地方定义接口\n带来的优点：\n+ 各个包之间松耦合，增强了灵活性，简化了测试\n+ 增加了代码灵活性\n+ 遵循依赖倒置原则\n\n# 2. 让接口简单专用\n好的接口设计应该遵循：\n+ 只包含所需功能依赖的必要方法\n+ 容易实现及理解\n+ 可重用、可替换\n  \n# 3. 使用组合来实现更复杂的接口\n+ 提升可重用性，更加清晰\n+ 简化了维护和扩展\n+ 与go的设计哲学保持一致\n\n# 4. 理解golang中接口的0值\n接口nil和纯nil不一样\n```golang\nvar err1 error // Uninitialized interface, nil\n\ntype MyError struct{}\nfunc (m *MyError) Error() string{\n    return \"my error\"\n}\n\nvar myError *MyError\nerr1 = myError\n```","source":"_posts/golang-interface.md","raw":"---\ntitle: Golang interface best practice\ndate: 2025-09-02 22:00:53\ntags: Golang\n---\n# 1. 在使用接口的地方定义接口\n带来的优点：\n+ 各个包之间松耦合，增强了灵活性，简化了测试\n+ 增加了代码灵活性\n+ 遵循依赖倒置原则\n\n# 2. 让接口简单专用\n好的接口设计应该遵循：\n+ 只包含所需功能依赖的必要方法\n+ 容易实现及理解\n+ 可重用、可替换\n  \n# 3. 使用组合来实现更复杂的接口\n+ 提升可重用性，更加清晰\n+ 简化了维护和扩展\n+ 与go的设计哲学保持一致\n\n# 4. 理解golang中接口的0值\n接口nil和纯nil不一样\n```golang\nvar err1 error // Uninitialized interface, nil\n\ntype MyError struct{}\nfunc (m *MyError) Error() string{\n    return \"my error\"\n}\n\nvar myError *MyError\nerr1 = myError\n```","slug":"golang-interface","published":1,"updated":"2025-09-02T14:16:19.799Z","comments":1,"layout":"post","photos":[],"_id":"cmf2mt9em00002ruz0cf1hnkp","content":"<h1 id=\"1-在使用接口的地方定义接口\"><a href=\"#1-在使用接口的地方定义接口\" class=\"headerlink\" title=\"1. 在使用接口的地方定义接口\"></a>1. 在使用接口的地方定义接口</h1><p>带来的优点：</p>\n<ul>\n<li>各个包之间松耦合，增强了灵活性，简化了测试</li>\n<li>增加了代码灵活性</li>\n<li>遵循依赖倒置原则</li>\n</ul>\n<h1 id=\"2-让接口简单专用\"><a href=\"#2-让接口简单专用\" class=\"headerlink\" title=\"2. 让接口简单专用\"></a>2. 让接口简单专用</h1><p>好的接口设计应该遵循：</p>\n<ul>\n<li>只包含所需功能依赖的必要方法</li>\n<li>容易实现及理解</li>\n<li>可重用、可替换</li>\n</ul>\n<h1 id=\"3-使用组合来实现更复杂的接口\"><a href=\"#3-使用组合来实现更复杂的接口\" class=\"headerlink\" title=\"3. 使用组合来实现更复杂的接口\"></a>3. 使用组合来实现更复杂的接口</h1><ul>\n<li>提升可重用性，更加清晰</li>\n<li>简化了维护和扩展</li>\n<li>与go的设计哲学保持一致</li>\n</ul>\n<h1 id=\"4-理解golang中接口的0值\"><a href=\"#4-理解golang中接口的0值\" class=\"headerlink\" title=\"4. 理解golang中接口的0值\"></a>4. 理解golang中接口的0值</h1><p>接口nil和纯nil不一样</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> err1 <span class=\"type\">error</span> <span class=\"comment\">// Uninitialized interface, nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyError <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MyError)</span></span> Error() <span class=\"type\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;my error&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myError *MyError</span><br><span class=\"line\">err1 = myError</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"1-在使用接口的地方定义接口\"><a href=\"#1-在使用接口的地方定义接口\" class=\"headerlink\" title=\"1. 在使用接口的地方定义接口\"></a>1. 在使用接口的地方定义接口</h1><p>带来的优点：</p>\n<ul>\n<li>各个包之间松耦合，增强了灵活性，简化了测试</li>\n<li>增加了代码灵活性</li>\n<li>遵循依赖倒置原则</li>\n</ul>\n<h1 id=\"2-让接口简单专用\"><a href=\"#2-让接口简单专用\" class=\"headerlink\" title=\"2. 让接口简单专用\"></a>2. 让接口简单专用</h1><p>好的接口设计应该遵循：</p>\n<ul>\n<li>只包含所需功能依赖的必要方法</li>\n<li>容易实现及理解</li>\n<li>可重用、可替换</li>\n</ul>\n<h1 id=\"3-使用组合来实现更复杂的接口\"><a href=\"#3-使用组合来实现更复杂的接口\" class=\"headerlink\" title=\"3. 使用组合来实现更复杂的接口\"></a>3. 使用组合来实现更复杂的接口</h1><ul>\n<li>提升可重用性，更加清晰</li>\n<li>简化了维护和扩展</li>\n<li>与go的设计哲学保持一致</li>\n</ul>\n<h1 id=\"4-理解golang中接口的0值\"><a href=\"#4-理解golang中接口的0值\" class=\"headerlink\" title=\"4. 理解golang中接口的0值\"></a>4. 理解golang中接口的0值</h1><p>接口nil和纯nil不一样</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> err1 <span class=\"type\">error</span> <span class=\"comment\">// Uninitialized interface, nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyError <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MyError)</span></span> Error() <span class=\"type\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;my error&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myError *MyError</span><br><span class=\"line\">err1 = myError</span><br></pre></td></tr></table></figure>"},{"title":"Authentication and authorization","date":"2025-09-08T14:39:36.000Z","_content":"# 认证（Authentication）\n认证要解决的是系统如何正确的分辨出操作用户的真实身份。三种层面的认证：\n1. 通信信道上的认证：在网络传输（Network）场景中的典型是基于SSL/TLS传输安全层的认证。\n2. 通信协议上的认证：在互联网（Internet）场景中的典型是基于HTTP协议的认证。IETF定义的一些HTTP认证方案：\n   + Basic：HTTP请求header添加base64加密后的用户名和密码\n   + Digest：改进的basic（用户名和密码加盐）\n   + Bearer：基于Oauth2规范来完成认证\n   + HOBA：基于自签名证书的认证方案\n3. 通信内容上的认证：在万维网（World Wide Web）场景中的典型是基于Web内容的认证。\n   + WebAuthn\n# 授权（Authorization）\n授权要解决的是系统如何控制一个用户该看到哪些数据、能操作哪些功能。典型的授权方案：\n1. RBAC（Role-Based Access Control）：用户（user）隶属角色（role），角色拥有许可（permission）操作资源（resource）。\n2. ABAC（Attribute-Based Access Control）\n3. ACL（Access Control List）\n4. RBAC（Rule-Based Access Control）\n5. MAC（Mandatory Access Control）\n6. Oauth2：面向解决第三方应用的认证授权协议","source":"_posts/web-auth.md","raw":"---\ntitle: Authentication and authorization\ndate: 2025-09-08 22:39:36\ntags: Web \n---\n# 认证（Authentication）\n认证要解决的是系统如何正确的分辨出操作用户的真实身份。三种层面的认证：\n1. 通信信道上的认证：在网络传输（Network）场景中的典型是基于SSL/TLS传输安全层的认证。\n2. 通信协议上的认证：在互联网（Internet）场景中的典型是基于HTTP协议的认证。IETF定义的一些HTTP认证方案：\n   + Basic：HTTP请求header添加base64加密后的用户名和密码\n   + Digest：改进的basic（用户名和密码加盐）\n   + Bearer：基于Oauth2规范来完成认证\n   + HOBA：基于自签名证书的认证方案\n3. 通信内容上的认证：在万维网（World Wide Web）场景中的典型是基于Web内容的认证。\n   + WebAuthn\n# 授权（Authorization）\n授权要解决的是系统如何控制一个用户该看到哪些数据、能操作哪些功能。典型的授权方案：\n1. RBAC（Role-Based Access Control）：用户（user）隶属角色（role），角色拥有许可（permission）操作资源（resource）。\n2. ABAC（Attribute-Based Access Control）\n3. ACL（Access Control List）\n4. RBAC（Rule-Based Access Control）\n5. MAC（Mandatory Access Control）\n6. Oauth2：面向解决第三方应用的认证授权协议","slug":"web-auth","published":1,"updated":"2025-09-08T16:21:43.098Z","comments":1,"layout":"post","photos":[],"_id":"cmfbbxuq60000gxuz1tiz2jr1","content":"<h1 id=\"认证（Authentication）\"><a href=\"#认证（Authentication）\" class=\"headerlink\" title=\"认证（Authentication）\"></a>认证（Authentication）</h1><p>认证要解决的是系统如何正确的分辨出操作用户的真实身份。三种层面的认证：</p>\n<ol>\n<li>通信信道上的认证：在网络传输（Network）场景中的典型是基于SSL&#x2F;TLS传输安全层的认证。</li>\n<li>通信协议上的认证：在互联网（Internet）场景中的典型是基于HTTP协议的认证。IETF定义的一些HTTP认证方案：<ul>\n<li>Basic：HTTP请求header添加base64加密后的用户名和密码</li>\n<li>Digest：改进的basic（用户名和密码加盐）</li>\n<li>Bearer：基于Oauth2规范来完成认证</li>\n<li>HOBA：基于自签名证书的认证方案</li>\n</ul>\n</li>\n<li>通信内容上的认证：在万维网（World Wide Web）场景中的典型是基于Web内容的认证。<ul>\n<li>WebAuthn</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"授权（Authorization）\"><a href=\"#授权（Authorization）\" class=\"headerlink\" title=\"授权（Authorization）\"></a>授权（Authorization）</h1><p>授权要解决的是系统如何控制一个用户该看到哪些数据、能操作哪些功能。典型的授权方案：</p>\n<ol>\n<li>RBAC（Role-Based Access Control）：用户（user）隶属角色（role），角色拥有许可（permission）操作资源（resource）。</li>\n<li>ABAC（Attribute-Based Access Control）</li>\n<li>ACL（Access Control List）</li>\n<li>RBAC（Rule-Based Access Control）</li>\n<li>MAC（Mandatory Access Control）</li>\n<li>Oauth2：面向解决第三方应用的认证授权协议</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"认证（Authentication）\"><a href=\"#认证（Authentication）\" class=\"headerlink\" title=\"认证（Authentication）\"></a>认证（Authentication）</h1><p>认证要解决的是系统如何正确的分辨出操作用户的真实身份。三种层面的认证：</p>\n<ol>\n<li>通信信道上的认证：在网络传输（Network）场景中的典型是基于SSL&#x2F;TLS传输安全层的认证。</li>\n<li>通信协议上的认证：在互联网（Internet）场景中的典型是基于HTTP协议的认证。IETF定义的一些HTTP认证方案：<ul>\n<li>Basic：HTTP请求header添加base64加密后的用户名和密码</li>\n<li>Digest：改进的basic（用户名和密码加盐）</li>\n<li>Bearer：基于Oauth2规范来完成认证</li>\n<li>HOBA：基于自签名证书的认证方案</li>\n</ul>\n</li>\n<li>通信内容上的认证：在万维网（World Wide Web）场景中的典型是基于Web内容的认证。<ul>\n<li>WebAuthn</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"授权（Authorization）\"><a href=\"#授权（Authorization）\" class=\"headerlink\" title=\"授权（Authorization）\"></a>授权（Authorization）</h1><p>授权要解决的是系统如何控制一个用户该看到哪些数据、能操作哪些功能。典型的授权方案：</p>\n<ol>\n<li>RBAC（Role-Based Access Control）：用户（user）隶属角色（role），角色拥有许可（permission）操作资源（resource）。</li>\n<li>ABAC（Attribute-Based Access Control）</li>\n<li>ACL（Access Control List）</li>\n<li>RBAC（Rule-Based Access Control）</li>\n<li>MAC（Mandatory Access Control）</li>\n<li>Oauth2：面向解决第三方应用的认证授权协议</li>\n</ol>\n"},{"title":"Function as a service","date":"2025-09-28T15:43:02.000Z","_content":"\n","source":"_posts/fuction-as-a-service.md","raw":"---\ntitle: Function as a service\ndate: 2025-09-28 23:43:02\ntags: faas\n---\n\n","slug":"fuction-as-a-service","published":1,"updated":"2025-10-11T12:15:16.571Z","_id":"cmg3vdr1f0000m4uz2hns5wxw","comments":1,"layout":"post","photos":[],"content":"","excerpt":"","more":""},{"title":"linux-cgroups","date":"2025-10-11T12:15:42.000Z","_content":"#  cgroup\n## cgroup v1和cgroup v2\n怎么查看是v1还是v2：\n```sh\nmount | grep cgroup\n```\n切换：编辑`/etc/default/grub`，GRUB_CMDLINE_LINUX内将systemd.unified_cgroup_hierarchy设置为0即是cgroup v1，设置为1则是cgroup v2，编辑后需要执行\n```sh\nupdate-grub\nreboot\n```\n\n## cgroup v1使用\n限制PID这个进程只能使用0.5核。\n```sh\nmkdir /sys/fs/cgroup/cpu/test\necho 50000 > /sys/fs/cgroup/cpu/zz/cpu.cfs_quota_us\necho PID > /sys/fs/cgroup/cpu/zz/cgroup.procs\n```\n查看cgroup个数\n```sh\ncat /proc/cgroups|column -t\n```\n\n查看进程的cgroup信息\n```sh\ncat /proc/PID/cgroup\n```\n\n安装cgroup工具\n```\napt install  libcgroup libcgroup-tools\n```\n\n## cgroup 子系统\n\n+ cpu: 限制cgroup的cpu使用量\n+ cpuact: 统计cgroup的cpu使用情况\n+ cpuset: 设置cgroup能使用的cpu核内存节点\n+ memory: 设置cgroup能使用的内存\n+ blkio: 限制cgroup的io使用\n\n## 使用systemd设置cgroup\n示例\n```\n# dd.service\n[Unit]\nDescription=dd\nConditionFileIsExecutable=/usr/libexec/dd.sh\n[Service]\nType=simple\nExecStart=/usr/libexec/dd.sh\nSlice=zhrx.slice\nCPUAccounting=yes\nCPUQuota=40%\nMemoryAccounting=yes\nMemoryMax=200M\nTasksAccounting=yes\nBlockIOAccounting=yes\n[Install]\nWantedBy=multi-user.target\n```","source":"_posts/linux-cgroups.md","raw":"---\ntitle: linux-cgroups\ndate: 2025-10-11 20:15:42\ntags: Linux\n---\n#  cgroup\n## cgroup v1和cgroup v2\n怎么查看是v1还是v2：\n```sh\nmount | grep cgroup\n```\n切换：编辑`/etc/default/grub`，GRUB_CMDLINE_LINUX内将systemd.unified_cgroup_hierarchy设置为0即是cgroup v1，设置为1则是cgroup v2，编辑后需要执行\n```sh\nupdate-grub\nreboot\n```\n\n## cgroup v1使用\n限制PID这个进程只能使用0.5核。\n```sh\nmkdir /sys/fs/cgroup/cpu/test\necho 50000 > /sys/fs/cgroup/cpu/zz/cpu.cfs_quota_us\necho PID > /sys/fs/cgroup/cpu/zz/cgroup.procs\n```\n查看cgroup个数\n```sh\ncat /proc/cgroups|column -t\n```\n\n查看进程的cgroup信息\n```sh\ncat /proc/PID/cgroup\n```\n\n安装cgroup工具\n```\napt install  libcgroup libcgroup-tools\n```\n\n## cgroup 子系统\n\n+ cpu: 限制cgroup的cpu使用量\n+ cpuact: 统计cgroup的cpu使用情况\n+ cpuset: 设置cgroup能使用的cpu核内存节点\n+ memory: 设置cgroup能使用的内存\n+ blkio: 限制cgroup的io使用\n\n## 使用systemd设置cgroup\n示例\n```\n# dd.service\n[Unit]\nDescription=dd\nConditionFileIsExecutable=/usr/libexec/dd.sh\n[Service]\nType=simple\nExecStart=/usr/libexec/dd.sh\nSlice=zhrx.slice\nCPUAccounting=yes\nCPUQuota=40%\nMemoryAccounting=yes\nMemoryMax=200M\nTasksAccounting=yes\nBlockIOAccounting=yes\n[Install]\nWantedBy=multi-user.target\n```","slug":"linux-cgroups","published":1,"updated":"2025-10-11T16:13:07.898Z","comments":1,"layout":"post","photos":[],"_id":"cmgmh6jvq0000fuuzc2sj8vw9","content":"<h1 id=\"cgroup\"><a href=\"#cgroup\" class=\"headerlink\" title=\"cgroup\"></a>cgroup</h1><h2 id=\"cgroup-v1和cgroup-v2\"><a href=\"#cgroup-v1和cgroup-v2\" class=\"headerlink\" title=\"cgroup v1和cgroup v2\"></a>cgroup v1和cgroup v2</h2><p>怎么查看是v1还是v2：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount | grep cgroup</span><br></pre></td></tr></table></figure>\n<p>切换：编辑<code>/etc/default/grub</code>，GRUB_CMDLINE_LINUX内将systemd.unified_cgroup_hierarchy设置为0即是cgroup v1，设置为1则是cgroup v2，编辑后需要执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update-grub</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cgroup-v1使用\"><a href=\"#cgroup-v1使用\" class=\"headerlink\" title=\"cgroup v1使用\"></a>cgroup v1使用</h2><p>限制PID这个进程只能使用0.5核。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /sys/fs/cgroup/cpu/test</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 50000 &gt; /sys/fs/cgroup/cpu/zz/cpu.cfs_quota_us</span><br><span class=\"line\"><span class=\"built_in\">echo</span> PID &gt; /sys/fs/cgroup/cpu/zz/cgroup.procs</span><br></pre></td></tr></table></figure>\n<p>查看cgroup个数</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /proc/cgroups|column -t</span><br></pre></td></tr></table></figure>\n\n<p>查看进程的cgroup信息</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /proc/PID/cgroup</span><br></pre></td></tr></table></figure>\n\n<p>安装cgroup工具</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install  libcgroup libcgroup-tools</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cgroup-子系统\"><a href=\"#cgroup-子系统\" class=\"headerlink\" title=\"cgroup 子系统\"></a>cgroup 子系统</h2><ul>\n<li>cpu: 限制cgroup的cpu使用量</li>\n<li>cpuact: 统计cgroup的cpu使用情况</li>\n<li>cpuset: 设置cgroup能使用的cpu核内存节点</li>\n<li>memory: 设置cgroup能使用的内存</li>\n<li>blkio: 限制cgroup的io使用</li>\n</ul>\n<h2 id=\"使用systemd设置cgroup\"><a href=\"#使用systemd设置cgroup\" class=\"headerlink\" title=\"使用systemd设置cgroup\"></a>使用systemd设置cgroup</h2><p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># dd.service</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=dd</span><br><span class=\"line\">ConditionFileIsExecutable=/usr/libexec/dd.sh</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">ExecStart=/usr/libexec/dd.sh</span><br><span class=\"line\">Slice=zhrx.slice</span><br><span class=\"line\">CPUAccounting=yes</span><br><span class=\"line\">CPUQuota=40%</span><br><span class=\"line\">MemoryAccounting=yes</span><br><span class=\"line\">MemoryMax=200M</span><br><span class=\"line\">TasksAccounting=yes</span><br><span class=\"line\">BlockIOAccounting=yes</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"cgroup\"><a href=\"#cgroup\" class=\"headerlink\" title=\"cgroup\"></a>cgroup</h1><h2 id=\"cgroup-v1和cgroup-v2\"><a href=\"#cgroup-v1和cgroup-v2\" class=\"headerlink\" title=\"cgroup v1和cgroup v2\"></a>cgroup v1和cgroup v2</h2><p>怎么查看是v1还是v2：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount | grep cgroup</span><br></pre></td></tr></table></figure>\n<p>切换：编辑<code>/etc/default/grub</code>，GRUB_CMDLINE_LINUX内将systemd.unified_cgroup_hierarchy设置为0即是cgroup v1，设置为1则是cgroup v2，编辑后需要执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update-grub</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cgroup-v1使用\"><a href=\"#cgroup-v1使用\" class=\"headerlink\" title=\"cgroup v1使用\"></a>cgroup v1使用</h2><p>限制PID这个进程只能使用0.5核。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /sys/fs/cgroup/cpu/test</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 50000 &gt; /sys/fs/cgroup/cpu/zz/cpu.cfs_quota_us</span><br><span class=\"line\"><span class=\"built_in\">echo</span> PID &gt; /sys/fs/cgroup/cpu/zz/cgroup.procs</span><br></pre></td></tr></table></figure>\n<p>查看cgroup个数</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /proc/cgroups|column -t</span><br></pre></td></tr></table></figure>\n\n<p>查看进程的cgroup信息</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /proc/PID/cgroup</span><br></pre></td></tr></table></figure>\n\n<p>安装cgroup工具</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install  libcgroup libcgroup-tools</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cgroup-子系统\"><a href=\"#cgroup-子系统\" class=\"headerlink\" title=\"cgroup 子系统\"></a>cgroup 子系统</h2><ul>\n<li>cpu: 限制cgroup的cpu使用量</li>\n<li>cpuact: 统计cgroup的cpu使用情况</li>\n<li>cpuset: 设置cgroup能使用的cpu核内存节点</li>\n<li>memory: 设置cgroup能使用的内存</li>\n<li>blkio: 限制cgroup的io使用</li>\n</ul>\n<h2 id=\"使用systemd设置cgroup\"><a href=\"#使用systemd设置cgroup\" class=\"headerlink\" title=\"使用systemd设置cgroup\"></a>使用systemd设置cgroup</h2><p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># dd.service</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=dd</span><br><span class=\"line\">ConditionFileIsExecutable=/usr/libexec/dd.sh</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">ExecStart=/usr/libexec/dd.sh</span><br><span class=\"line\">Slice=zhrx.slice</span><br><span class=\"line\">CPUAccounting=yes</span><br><span class=\"line\">CPUQuota=40%</span><br><span class=\"line\">MemoryAccounting=yes</span><br><span class=\"line\">MemoryMax=200M</span><br><span class=\"line\">TasksAccounting=yes</span><br><span class=\"line\">BlockIOAccounting=yes</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cmf2mt9em00002ruz0cf1hnkp","tag_id":"cmf2mt9eo00012ruz7tx25whh","_id":"cmf2mt9ep00032ruz0ahoc4eo"},{"post_id":"cme779yae0000fiuz0vyogfh5","tag_id":"cmf2mt9ep00022ruz48bths3x","_id":"cmf2mt9eq00052ruz9t1v4f58"},{"post_id":"cmejz9qzd0000gsuzb71657v7","tag_id":"cmf2mt9eq00042ruzfo5iahwb","_id":"cmf2mt9eq00062ruz42nw6qb1"},{"post_id":"cmfbbxuq60000gxuz1tiz2jr1","tag_id":"cmfbbxuq80001gxuz2tbhhcy0","_id":"cmfbbxuq90002gxuz11hvbrt2"},{"post_id":"cmgmh6jvq0000fuuzc2sj8vw9","tag_id":"cmf2mt9eq00042ruzfo5iahwb","_id":"cmgmh6jvs0002fuuzbzf6ewpx"},{"post_id":"cmg3vdr1f0000m4uz2hns5wxw","tag_id":"cmgmh6jvr0001fuuzevcu9yba","_id":"cmgmh6jvs0003fuuzforl758t"}],"Tag":[{"name":"Golang","_id":"cmf2mt9eo00012ruz7tx25whh"},{"name":"Kubernetes","_id":"cmf2mt9ep00022ruz48bths3x"},{"name":"Linux","_id":"cmf2mt9eq00042ruzfo5iahwb"},{"name":"Web","_id":"cmfbbxuq80001gxuz2tbhhcy0"},{"name":"faas serverless","_id":"cmg3vdr1h0001m4uz9s0n2dn0"},{"name":"faas","_id":"cmgmh6jvr0001fuuzevcu9yba"}]}}